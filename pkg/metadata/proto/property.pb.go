// Code generated by protoc-gen-go. DO NOT EDIT.
// source: property.proto

package runm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A property's value may be any scalar JSON type
type PropertySchema_Type int32

const (
	PropertySchema_TYPE_STRING  PropertySchema_Type = 0
	PropertySchema_TYPE_INTEGER PropertySchema_Type = 1
	PropertySchema_TYPE_NUMBER  PropertySchema_Type = 2
	PropertySchema_TYPE_BOOLEAN PropertySchema_Type = 3
)

var PropertySchema_Type_name = map[int32]string{
	0: "TYPE_STRING",
	1: "TYPE_INTEGER",
	2: "TYPE_NUMBER",
	3: "TYPE_BOOLEAN",
}
var PropertySchema_Type_value = map[string]int32{
	"TYPE_STRING":  0,
	"TYPE_INTEGER": 1,
	"TYPE_NUMBER":  2,
	"TYPE_BOOLEAN": 3,
}

func (x PropertySchema_Type) String() string {
	return proto.EnumName(PropertySchema_Type_name, int32(x))
}
func (PropertySchema_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_property_472ec8aa687555cf, []int{2, 0}
}

// Some pre-defined patterns that match JSONSchema Draft 7 formats that are
// supported by runmachine property schemas
type PropertySchema_Format int32

const (
	PropertySchema_FORMAT_NONE          PropertySchema_Format = 0
	PropertySchema_FORMAT_DATETIME      PropertySchema_Format = 1
	PropertySchema_FORMAT_DATE          PropertySchema_Format = 2
	PropertySchema_FORMAT_TIME          PropertySchema_Format = 3
	PropertySchema_FORMAT_EMAIL         PropertySchema_Format = 4
	PropertySchema_FORMAT_IDN_EMAIL     PropertySchema_Format = 5
	PropertySchema_FORMAT_HOSTNAME      PropertySchema_Format = 6
	PropertySchema_FORMAT_IDN_HOSTNAME  PropertySchema_Format = 7
	PropertySchema_FORMAT_IPV4          PropertySchema_Format = 8
	PropertySchema_FORMAT_IPV6          PropertySchema_Format = 9
	PropertySchema_FORMAT_URI           PropertySchema_Format = 10
	PropertySchema_FORMAT_URI_REFERENCE PropertySchema_Format = 11
	PropertySchema_FORMAT_IRI           PropertySchema_Format = 12
	PropertySchema_FORMAT_IRI_REFERENCE PropertySchema_Format = 13
	PropertySchema_FORMAT_URI_TEMPLATE  PropertySchema_Format = 14
)

var PropertySchema_Format_name = map[int32]string{
	0:  "FORMAT_NONE",
	1:  "FORMAT_DATETIME",
	2:  "FORMAT_DATE",
	3:  "FORMAT_TIME",
	4:  "FORMAT_EMAIL",
	5:  "FORMAT_IDN_EMAIL",
	6:  "FORMAT_HOSTNAME",
	7:  "FORMAT_IDN_HOSTNAME",
	8:  "FORMAT_IPV4",
	9:  "FORMAT_IPV6",
	10: "FORMAT_URI",
	11: "FORMAT_URI_REFERENCE",
	12: "FORMAT_IRI",
	13: "FORMAT_IRI_REFERENCE",
	14: "FORMAT_URI_TEMPLATE",
}
var PropertySchema_Format_value = map[string]int32{
	"FORMAT_NONE":          0,
	"FORMAT_DATETIME":      1,
	"FORMAT_DATE":          2,
	"FORMAT_TIME":          3,
	"FORMAT_EMAIL":         4,
	"FORMAT_IDN_EMAIL":     5,
	"FORMAT_HOSTNAME":      6,
	"FORMAT_IDN_HOSTNAME":  7,
	"FORMAT_IPV4":          8,
	"FORMAT_IPV6":          9,
	"FORMAT_URI":           10,
	"FORMAT_URI_REFERENCE": 11,
	"FORMAT_IRI":           12,
	"FORMAT_IRI_REFERENCE": 13,
	"FORMAT_URI_TEMPLATE":  14,
}

func (x PropertySchema_Format) String() string {
	return proto.EnumName(PropertySchema_Format_name, int32(x))
}
func (PropertySchema_Format) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_property_472ec8aa687555cf, []int{2, 1}
}

type Property struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Property) Reset()         { *m = Property{} }
func (m *Property) String() string { return proto.CompactTextString(m) }
func (*Property) ProtoMessage()    {}
func (*Property) Descriptor() ([]byte, []int) {
	return fileDescriptor_property_472ec8aa687555cf, []int{0}
}
func (m *Property) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Property.Unmarshal(m, b)
}
func (m *Property) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Property.Marshal(b, m, deterministic)
}
func (dst *Property) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Property.Merge(dst, src)
}
func (m *Property) XXX_Size() int {
	return xxx_messageInfo_Property.Size(m)
}
func (m *Property) XXX_DiscardUnknown() {
	xxx_messageInfo_Property.DiscardUnknown(m)
}

var xxx_messageInfo_Property proto.InternalMessageInfo

func (m *Property) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Property) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// Indicates whether a particular property item may be changed or read by a
// class of user
type PropertyPermission struct {
	Project *StringValue `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	Role    *StringValue `protobuf:"bytes,2,opt,name=role" json:"role,omitempty"`
	// The read/write permissions on the property. The default permissions for
	// any property on an object is that if a user is allowed to read the
	// object, the user is allowed to read all properties associated with the
	// object. To deny read permission to a particular role or project, a
	// PropertyAccessPermission can be created with a zero-valued permission
	// field, which indicates the role and/or project cannot read the property.
	//
	// 0            No permissions  (used to deny rights to specific project)
	// 1            Read permission
	// 1 << 1       Write permission
	Permission           uint32   `protobuf:"varint,3,opt,name=permission" json:"permission,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PropertyPermission) Reset()         { *m = PropertyPermission{} }
func (m *PropertyPermission) String() string { return proto.CompactTextString(m) }
func (*PropertyPermission) ProtoMessage()    {}
func (*PropertyPermission) Descriptor() ([]byte, []int) {
	return fileDescriptor_property_472ec8aa687555cf, []int{1}
}
func (m *PropertyPermission) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropertyPermission.Unmarshal(m, b)
}
func (m *PropertyPermission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropertyPermission.Marshal(b, m, deterministic)
}
func (dst *PropertyPermission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropertyPermission.Merge(dst, src)
}
func (m *PropertyPermission) XXX_Size() int {
	return xxx_messageInfo_PropertyPermission.Size(m)
}
func (m *PropertyPermission) XXX_DiscardUnknown() {
	xxx_messageInfo_PropertyPermission.DiscardUnknown(m)
}

var xxx_messageInfo_PropertyPermission proto.InternalMessageInfo

func (m *PropertyPermission) GetProject() *StringValue {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *PropertyPermission) GetRole() *StringValue {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *PropertyPermission) GetPermission() uint32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

// Administrators are able to create schemas that allow the restriction of data
// type and format for a particular property key. The only restriction is that
// the schema may not allow the value of the property item value to be
// an object or array. In other words, the value of the property item must be a
// scalar value.
//
// For example, let's say an administrator wants to allow users to associate an
// "application type" to images that may be used to launch machines. There are
// three possible values for the application type, corresponding to internal IT
// classifications of various company software:
//
// * tool
// * product
// * vendor
//
// The administrator would create a property definition object with schema that looks
// like this:
//
// type: string
// enum:
//   - tool
//   - product
//   - vendor
//
// The adminstrator would then save a PropertyDefinition message with an
// object_type of "image", a key of "application_code", and the above schema.
//
// Once saved to the property service, the "application_type" property item
// values would be validated against the above schema before being stored.
type PropertySchema struct {
	// Zero or more valid scalar types for the value. If empty, "string" is
	// assumed
	Types []PropertySchema_Type `protobuf:"varint,1,rep,packed,name=types,enum=runm.PropertySchema_Type" json:"types,omitempty"`
	// The valid strings the value may be
	EnumValues []string `protobuf:"bytes,2,rep,name=enum_values,json=enumValues" json:"enum_values,omitempty"`
	// If the type is numeric, the value must be a multiple of this number
	MultipleOf *UInt64Value `protobuf:"bytes,3,opt,name=multiple_of,json=multipleOf" json:"multiple_of,omitempty"`
	// If the type is numeric, the value must be greater than or equal to this
	// number
	Minimum *Int64Value `protobuf:"bytes,4,opt,name=minimum" json:"minimum,omitempty"`
	// If the type is numeric, the value must be less than or equal to this
	// number
	Maximum *Int64Value `protobuf:"bytes,5,opt,name=maximum" json:"maximum,omitempty"`
	// If the type is string, the value must have a length greater than or
	// equal to this number
	MinimumLength *UInt64Value `protobuf:"bytes,6,opt,name=minimum_length,json=minimumLength" json:"minimum_length,omitempty"`
	// If the type is string, the value must have a length less than or equal
	// to this number
	MaximumLength *UInt64Value `protobuf:"bytes,7,opt,name=maximum_length,json=maximumLength" json:"maximum_length,omitempty"`
	// Regex pattern that value must match
	Pattern string `protobuf:"bytes,8,opt,name=pattern" json:"pattern,omitempty"`
	// Pre-defined regex format the value must match (see JSONSchema Draft 7
	// formats)
	Format               PropertySchema_Format `protobuf:"varint,9,opt,name=format,enum=runm.PropertySchema_Format" json:"format,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PropertySchema) Reset()         { *m = PropertySchema{} }
func (m *PropertySchema) String() string { return proto.CompactTextString(m) }
func (*PropertySchema) ProtoMessage()    {}
func (*PropertySchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_property_472ec8aa687555cf, []int{2}
}
func (m *PropertySchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropertySchema.Unmarshal(m, b)
}
func (m *PropertySchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropertySchema.Marshal(b, m, deterministic)
}
func (dst *PropertySchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropertySchema.Merge(dst, src)
}
func (m *PropertySchema) XXX_Size() int {
	return xxx_messageInfo_PropertySchema.Size(m)
}
func (m *PropertySchema) XXX_DiscardUnknown() {
	xxx_messageInfo_PropertySchema.DiscardUnknown(m)
}

var xxx_messageInfo_PropertySchema proto.InternalMessageInfo

func (m *PropertySchema) GetTypes() []PropertySchema_Type {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *PropertySchema) GetEnumValues() []string {
	if m != nil {
		return m.EnumValues
	}
	return nil
}

func (m *PropertySchema) GetMultipleOf() *UInt64Value {
	if m != nil {
		return m.MultipleOf
	}
	return nil
}

func (m *PropertySchema) GetMinimum() *Int64Value {
	if m != nil {
		return m.Minimum
	}
	return nil
}

func (m *PropertySchema) GetMaximum() *Int64Value {
	if m != nil {
		return m.Maximum
	}
	return nil
}

func (m *PropertySchema) GetMinimumLength() *UInt64Value {
	if m != nil {
		return m.MinimumLength
	}
	return nil
}

func (m *PropertySchema) GetMaximumLength() *UInt64Value {
	if m != nil {
		return m.MaximumLength
	}
	return nil
}

func (m *PropertySchema) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *PropertySchema) GetFormat() PropertySchema_Format {
	if m != nil {
		return m.Format
	}
	return PropertySchema_FORMAT_NONE
}

type PropertyDefinition struct {
	// UUID of the partition this property definition has been created in
	Partition string `protobuf:"bytes,1,opt,name=partition" json:"partition,omitempty"`
	// String code of the object type the property definition applies to. e.g.
	// "runm.machine"
	ObjectType string `protobuf:"bytes,2,opt,name=object_type,json=objectType" json:"object_type,omitempty"`
	// The property key to apply the property definition to. e.g. "architecture"
	Key string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	// The property definition's globally-unique identifier
	Uuid string `protobuf:"bytes,4,opt,name=uuid" json:"uuid,omitempty"`
	// true if this property key must be set on objects of this type
	IsRequired bool `protobuf:"varint,6,opt,name=is_required,json=isRequired" json:"is_required,omitempty"`
	// Describes the format and type constraints of the value of the property
	Schema *PropertySchema `protobuf:"bytes,50,opt,name=schema" json:"schema,omitempty"`
	// Collection of access permissions applied to this property
	Permissions          []*PropertyPermission `protobuf:"bytes,51,rep,name=permissions" json:"permissions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PropertyDefinition) Reset()         { *m = PropertyDefinition{} }
func (m *PropertyDefinition) String() string { return proto.CompactTextString(m) }
func (*PropertyDefinition) ProtoMessage()    {}
func (*PropertyDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_property_472ec8aa687555cf, []int{3}
}
func (m *PropertyDefinition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropertyDefinition.Unmarshal(m, b)
}
func (m *PropertyDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropertyDefinition.Marshal(b, m, deterministic)
}
func (dst *PropertyDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropertyDefinition.Merge(dst, src)
}
func (m *PropertyDefinition) XXX_Size() int {
	return xxx_messageInfo_PropertyDefinition.Size(m)
}
func (m *PropertyDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_PropertyDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_PropertyDefinition proto.InternalMessageInfo

func (m *PropertyDefinition) GetPartition() string {
	if m != nil {
		return m.Partition
	}
	return ""
}

func (m *PropertyDefinition) GetObjectType() string {
	if m != nil {
		return m.ObjectType
	}
	return ""
}

func (m *PropertyDefinition) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PropertyDefinition) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *PropertyDefinition) GetIsRequired() bool {
	if m != nil {
		return m.IsRequired
	}
	return false
}

func (m *PropertyDefinition) GetSchema() *PropertySchema {
	if m != nil {
		return m.Schema
	}
	return nil
}

func (m *PropertyDefinition) GetPermissions() []*PropertyPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// Used in matching property definition records
type PropertyDefinitionFilter struct {
	Partition  *PartitionFilter  `protobuf:"bytes,1,opt,name=partition" json:"partition,omitempty"`
	ObjectType *ObjectTypeFilter `protobuf:"bytes,2,opt,name=object_type,json=objectType" json:"object_type,omitempty"`
	Uuid       string            `protobuf:"bytes,3,opt,name=uuid" json:"uuid,omitempty"`
	// A search term on the property definition's property key
	Key string `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	// Indicates the search should be a prefix expression
	UsePrefix            bool     `protobuf:"varint,5,opt,name=use_prefix,json=usePrefix" json:"use_prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PropertyDefinitionFilter) Reset()         { *m = PropertyDefinitionFilter{} }
func (m *PropertyDefinitionFilter) String() string { return proto.CompactTextString(m) }
func (*PropertyDefinitionFilter) ProtoMessage()    {}
func (*PropertyDefinitionFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_property_472ec8aa687555cf, []int{4}
}
func (m *PropertyDefinitionFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PropertyDefinitionFilter.Unmarshal(m, b)
}
func (m *PropertyDefinitionFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PropertyDefinitionFilter.Marshal(b, m, deterministic)
}
func (dst *PropertyDefinitionFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PropertyDefinitionFilter.Merge(dst, src)
}
func (m *PropertyDefinitionFilter) XXX_Size() int {
	return xxx_messageInfo_PropertyDefinitionFilter.Size(m)
}
func (m *PropertyDefinitionFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_PropertyDefinitionFilter.DiscardUnknown(m)
}

var xxx_messageInfo_PropertyDefinitionFilter proto.InternalMessageInfo

func (m *PropertyDefinitionFilter) GetPartition() *PartitionFilter {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *PropertyDefinitionFilter) GetObjectType() *ObjectTypeFilter {
	if m != nil {
		return m.ObjectType
	}
	return nil
}

func (m *PropertyDefinitionFilter) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *PropertyDefinitionFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PropertyDefinitionFilter) GetUsePrefix() bool {
	if m != nil {
		return m.UsePrefix
	}
	return false
}

func init() {
	proto.RegisterType((*Property)(nil), "runm.Property")
	proto.RegisterType((*PropertyPermission)(nil), "runm.PropertyPermission")
	proto.RegisterType((*PropertySchema)(nil), "runm.PropertySchema")
	proto.RegisterType((*PropertyDefinition)(nil), "runm.PropertyDefinition")
	proto.RegisterType((*PropertyDefinitionFilter)(nil), "runm.PropertyDefinitionFilter")
	proto.RegisterEnum("runm.PropertySchema_Type", PropertySchema_Type_name, PropertySchema_Type_value)
	proto.RegisterEnum("runm.PropertySchema_Format", PropertySchema_Format_name, PropertySchema_Format_value)
}

func init() { proto.RegisterFile("property.proto", fileDescriptor_property_472ec8aa687555cf) }

var fileDescriptor_property_472ec8aa687555cf = []byte{
	// 755 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xdb, 0x6e, 0xeb, 0x44,
	0x14, 0x86, 0xeb, 0x38, 0xc7, 0xe5, 0xd6, 0x9d, 0x4e, 0x03, 0x98, 0x72, 0x8a, 0x22, 0x21, 0x45,
	0x80, 0x82, 0xe4, 0x54, 0x05, 0x71, 0x97, 0x52, 0xa7, 0x58, 0x4a, 0x9c, 0x68, 0xe2, 0x56, 0xe2,
	0xca, 0x4a, 0xdb, 0x49, 0x6b, 0x88, 0x0f, 0x8c, 0x6d, 0x68, 0xee, 0xb9, 0xe0, 0x85, 0xd0, 0x7e,
	0x8a, 0xfd, 0x4e, 0x5b, 0x9e, 0x19, 0xc7, 0xce, 0x6e, 0x7b, 0x97, 0xf9, 0xfd, 0xad, 0x35, 0x6b,
	0xfe, 0xcc, 0xfc, 0xa0, 0xc7, 0x2c, 0x8a, 0x29, 0x4b, 0xb7, 0xc3, 0x98, 0x45, 0x69, 0x84, 0xeb,
	0x2c, 0x0b, 0x83, 0xb3, 0x93, 0xe8, 0xee, 0x0f, 0x7a, 0x9f, 0x7a, 0xe9, 0x36, 0xa6, 0xe2, 0xc3,
	0xd9, 0x71, 0xbc, 0x62, 0xa9, 0x9f, 0xfa, 0x51, 0x28, 0x05, 0x14, 0x53, 0x16, 0xf8, 0x49, 0x52,
	0x2a, 0xfa, 0x3f, 0x6c, 0x15, 0xc7, 0x94, 0x25, 0x62, 0xdd, 0x37, 0xa1, 0xbd, 0x90, 0xdd, 0x31,
	0x02, 0xf5, 0x4f, 0xba, 0x35, 0x94, 0x9e, 0x32, 0xe8, 0x90, 0xfc, 0x27, 0xee, 0x42, 0xe3, 0xef,
	0xd5, 0x26, 0xa3, 0x46, 0x8d, 0x6b, 0x62, 0xd1, 0xff, 0x4f, 0x01, 0x5c, 0x14, 0x2d, 0x76, 0x1b,
	0xe0, 0xef, 0xa1, 0x15, 0xb3, 0x28, 0x9f, 0x89, 0xb7, 0xd0, 0xcc, 0x93, 0x61, 0x3e, 0xe8, 0x70,
	0x99, 0x32, 0x3f, 0x7c, 0xbc, 0xcd, 0x4b, 0x49, 0x41, 0xe0, 0x6f, 0xa1, 0xce, 0xa2, 0x8d, 0x68,
	0xfc, 0x2a, 0xc9, 0x3f, 0xe3, 0xaf, 0x01, 0xca, 0x23, 0x18, 0x6a, 0x4f, 0x19, 0x1c, 0x91, 0x8a,
	0xd2, 0x7f, 0xd7, 0x04, 0xbd, 0x18, 0x65, 0x79, 0xff, 0x44, 0x83, 0x15, 0xfe, 0x11, 0x1a, 0xb9,
	0x25, 0x89, 0xa1, 0xf4, 0xd4, 0x81, 0x6e, 0x7e, 0x2e, 0x5a, 0xef, 0x43, 0x43, 0x77, 0x1b, 0x53,
	0x22, 0x38, 0xfc, 0x0d, 0x68, 0x34, 0xcc, 0x02, 0x8f, 0x1f, 0x2e, 0x31, 0x6a, 0x3d, 0x75, 0xd0,
	0x21, 0x90, 0x4b, 0x7c, 0x92, 0x04, 0x9b, 0xa0, 0x05, 0xd9, 0x26, 0xf5, 0xe3, 0x0d, 0xf5, 0xa2,
	0x35, 0x9f, 0x62, 0x37, 0xf2, 0x8d, 0x1d, 0xa6, 0x17, 0xe7, 0x62, 0x64, 0x28, 0xa8, 0xf9, 0x1a,
	0x7f, 0x07, 0xad, 0xc0, 0x0f, 0xfd, 0x20, 0x0b, 0x8c, 0x3a, 0xe7, 0x91, 0xe0, 0x2b, 0x78, 0x01,
	0x70, 0x76, 0xf5, 0xcc, 0xd9, 0xc6, 0x9b, 0xac, 0x00, 0xf0, 0xcf, 0xa0, 0xcb, 0x32, 0x6f, 0x43,
	0xc3, 0xc7, 0xf4, 0xc9, 0x68, 0xbe, 0x35, 0xce, 0x91, 0x04, 0xa7, 0x9c, 0xe3, 0x95, 0xa2, 0x49,
	0x51, 0xd9, 0x7a, 0xbb, 0x52, 0x80, 0xb2, 0xd2, 0x80, 0x56, 0xbc, 0x4a, 0x53, 0xca, 0x42, 0xa3,
	0xcd, 0xef, 0x41, 0xb1, 0xc4, 0x23, 0x68, 0xae, 0x23, 0x16, 0xac, 0x52, 0xa3, 0xd3, 0x53, 0x06,
	0xba, 0xf9, 0xc5, 0xab, 0x66, 0x4f, 0x38, 0x42, 0x24, 0xda, 0x9f, 0x42, 0x3d, 0xb7, 0x1f, 0x1f,
	0x83, 0xe6, 0xfe, 0xbe, 0xb0, 0xbc, 0xa5, 0x4b, 0x6c, 0xe7, 0x1a, 0x1d, 0x60, 0x04, 0x87, 0x5c,
	0xb0, 0x1d, 0xd7, 0xba, 0xb6, 0x08, 0x52, 0x76, 0x88, 0x73, 0x33, 0xbb, 0xb4, 0x08, 0xaa, 0xed,
	0x90, 0xcb, 0xf9, 0x7c, 0x6a, 0x8d, 0x1d, 0xa4, 0xf6, 0xff, 0xaf, 0x41, 0x53, 0x6c, 0x90, 0xd3,
	0x93, 0x39, 0x99, 0x8d, 0x5d, 0xcf, 0x99, 0x3b, 0x16, 0x3a, 0xc0, 0xa7, 0x70, 0x2c, 0x85, 0xab,
	0xb1, 0x6b, 0xb9, 0xf6, 0xcc, 0x12, 0x3d, 0x2b, 0x22, 0xaa, 0x55, 0x04, 0x4e, 0xa8, 0xf9, 0x26,
	0x52, 0xb0, 0x66, 0x63, 0x7b, 0x8a, 0xea, 0xb8, 0x0b, 0x48, 0x2a, 0xf6, 0x95, 0x23, 0xd5, 0x46,
	0xa5, 0xfd, 0x6f, 0xf3, 0xa5, 0xeb, 0x8c, 0x67, 0x16, 0x6a, 0xe2, 0xcf, 0xe0, 0xb4, 0x82, 0xee,
	0x3e, 0xb4, 0x2a, 0xdb, 0xd8, 0x8b, 0xdb, 0x73, 0xd4, 0xde, 0x17, 0x2e, 0x50, 0x07, 0xeb, 0x00,
	0x52, 0xb8, 0x21, 0x36, 0x02, 0x6c, 0x40, 0xb7, 0x5c, 0x7b, 0xc4, 0x9a, 0x58, 0xc4, 0x72, 0x7e,
	0xb5, 0x90, 0x56, 0x21, 0x6d, 0x62, 0xa3, 0xc3, 0x0a, 0x69, 0xef, 0x91, 0x47, 0x95, 0x71, 0xf2,
	0x1e, 0xae, 0x35, 0x5b, 0x4c, 0xf3, 0x53, 0xeb, 0xfd, 0x7f, 0x6b, 0xe5, 0x23, 0xbe, 0xa2, 0x6b,
	0x3f, 0xe4, 0xb9, 0x81, 0xbf, 0x84, 0xce, 0x2e, 0x44, 0x64, 0x12, 0x94, 0x42, 0xfe, 0x54, 0x2a,
	0xa9, 0x23, 0x53, 0x01, 0x84, 0xc4, 0xff, 0x53, 0x19, 0x21, 0x6a, 0x19, 0x21, 0x18, 0xea, 0x59,
	0xe6, 0x3f, 0xf0, 0x57, 0xd0, 0x21, 0xfc, 0x77, 0xde, 0xc6, 0x4f, 0x3c, 0x46, 0xff, 0xca, 0x7c,
	0x46, 0x1f, 0xf8, 0x0d, 0x6e, 0x13, 0xf0, 0x13, 0x22, 0x15, 0xfc, 0x03, 0x34, 0x13, 0x7e, 0x77,
	0x0c, 0x93, 0xdf, 0xd1, 0xee, 0x6b, 0xf7, 0x8a, 0x48, 0x06, 0xff, 0x02, 0x5a, 0x19, 0x09, 0x89,
	0x31, 0xea, 0xa9, 0x03, 0xcd, 0x34, 0xf6, 0x4b, 0xca, 0x9c, 0x22, 0x55, 0xb8, 0xff, 0x5e, 0x01,
	0xe3, 0xa5, 0x0d, 0x13, 0x7f, 0x93, 0x52, 0x86, 0x47, 0x1f, 0x9b, 0xa1, 0x99, 0x9f, 0xc8, 0xb6,
	0x85, 0x2c, 0xc8, 0xaa, 0x47, 0x3f, 0xbd, 0xf4, 0x48, 0x33, 0x3f, 0x15, 0x65, 0xf3, 0x9d, 0x53,
	0xb2, 0xae, 0xea, 0x5d, 0xe1, 0x94, 0x5a, 0x71, 0x4a, 0xfa, 0x59, 0x2f, 0xfd, 0xfc, 0x0a, 0x20,
	0x4b, 0xa8, 0x17, 0x33, 0xba, 0xf6, 0x9f, 0x79, 0x5e, 0xb4, 0x49, 0x27, 0x4b, 0xe8, 0x82, 0x0b,
	0x77, 0x4d, 0x1e, 0xeb, 0xa3, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x43, 0xf8, 0xcd, 0x1b, 0x34,
	0x06, 0x00, 0x00,
}
