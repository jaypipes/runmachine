syntax = "proto3";

package runm;

import "distance.proto";
import "property.proto";
import "provider.proto";
import "resource_class.proto";
import "capability.proto";

message ProviderGroupConstraint {
    // All providers involved in the request group must collectively be
    // associated with ALL provider groups in this list
    repeated ProviderGroup require = 1;
    // No provider involved in the request group may be associated with ANY of
    // the provider groups in this list
    repeated ProviderGroup forbid = 2;
    // At least one provider involved in the request group must be associated
    // with AT LEAST ONE of the provider groups in this list
    repeated ProviderGroup any = 3;
}

message CapabilityConstraint {
    // All providers involved in the request group or resource constraint must
    // collectively contain ALL capabilities in this list
    repeated Capability require = 1;
    // No provider involved in the request group or resource constraint may
    // contain ANY of the capabilities in this list
    repeated Capability forbid = 2;
    // At least one provider involved in the request group or resource
    // constraint must contain AT LEAST ONE of the capabilities in this list
    repeated Capability any = 3;
}

message ResourceConstraint {
    ResourceClass resource_class = 1;
    uint64 amount = 2;
    // Providers having a matching amount of resources available to meet this
    // constraint must also match these capability constraints. This is a way
    // to have specific capability constraints apply to the provider of a
    // specific resource -- e.g. requiring that the provider of a
    // runm.cpu.dedicated resource have the AVX2 x86 instruction set extension
    // capability associated with it.
    CapabilityConstraint capability_constraint = 50;
}

message PropertyConstraint {
    // All providers involved in the request group must collectively have ALL
    // of the key/value pairs in this list
    repeated Property require_items = 1;
    // All providers involved in the request group must collectively have ALL
    // of the keys in this list. Doesn't matter what the value of the property
    // item is
    repeated string require_keys = 2;
    // No provider involved in the request group may have ANY of the key/value
    // pairs in this list
    repeated Property forbid_items = 3;
    // No provider involved in the request group may have ANY of the keys in
    // this list. Doesn't matter what the value of the property item is
    repeated string forbid_keys = 4;
    // At least one provider involved in the request group must have AT LEAST
    // ONE of the key/value pairs in this list
    repeated Property any_items = 5;
    // At least one provider involved in the request group must have AT LEAST
    // ONE of the keys in this list. Doesn't matter what the value of the
    // property item is
    repeated string any_keys = 6;
}

message DistanceConstraint {
    // Providers matched by this constraint will be a certain distance away
    // from (or near to) this provider
    Provider from = 2;
    // If set, indicates that all providers meeting this constraint will be in
    // provider groups that are at least this relative distance away from the
    // Provider "from"
    Distance minimum = 3;
    // If set, indicates that all providers meeting this constraint will be in
    // provider groups that are at most this relative distance away from the
    // Provider "from"
    Distance maximum = 4;
}
