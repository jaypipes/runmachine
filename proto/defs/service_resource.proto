syntax = "proto3";

package runm;

import "allocation.proto";
import "capability.proto";
import "claim.proto";
import "constraint.proto";
import "consumer.proto";
import "consumer_type.proto";
import "distance.proto";
import "error.proto";
import "inventory.proto";
import "partition.proto";
import "project.proto";
import "provider.proto";
import "provider_type.proto";
import "resource_class.proto";
import "search.proto";
import "session.proto";
import "usage.proto";
import "user.proto";
import "wrappers.proto";

// The runm-resource gRPC service manages inventory of the deployment's set of
// resource providers, the transactional claims of resources, basic scheduling
// and reservations.
service RunmResource {
    // Returns information about a specific resource class
    rpc resource_class_get(ResourceClassGetRequest) returns (ResourceClass) {}

    // Deletes one or more resource classes
    rpc resource_class_delete(ResourceClassDeleteRequest) returns (
        ResourceClassDeleteResponse) {}

    // Set information about a specific resource class
    rpc resource_class_set(ResourceClassSetRequest) returns (
        ResourceClassSetResponse) {}

    // Returns information about multiple resource classs
    rpc resource_class_list(ResourceClassListRequest) returns (
        stream ResourceClass) {}

    // Returns information about a specific capability
    rpc capability_get(CapabilityGetRequest) returns (Capability) {}

    // Deletes one or more capabilities
    rpc capability_delete(CapabilityDeleteRequest) returns (
        CapabilityDeleteResponse) {}

    // Set information about a specific capability
    rpc capability_set(CapabilitySetRequest) returns (CapabilitySetResponse) {}

    // Returns information about multiple capabilities
    rpc capability_list(CapabilityListRequest) returns (stream Capability) {}

    // Returns information about a specific consumer type
    rpc consumer_type_get(ConsumerTypeGetRequest) returns (ConsumerType) {}

    // Deletes one or more consumer typees
    rpc consumer_type_delete(ConsumerTypeDeleteRequest) returns (
        ConsumerTypeDeleteResponse) {}

    // Set information about a specific consumer type
    rpc consumer_type_set(ConsumerTypeSetRequest) returns (
        ConsumerTypeSetResponse) {}

    // Returns information about multiple consumer types
    rpc consumer_type_list(ConsumerTypeListRequest) returns (
        stream ConsumerType) {}

    // Returns information about a specific consumer type
    rpc consumer_get(ConsumerGetRequest) returns (Consumer) {}

    // Deletes one or more consumer typees
    rpc consumer_delete(ConsumerDeleteRequest) returns (
        ConsumerDeleteResponse) {}

    // Set information about a specific consumer type
    rpc consumer_set(ConsumerSetRequest) returns (ConsumerSetResponse) {}

    // Returns information about multiple consumer types
    rpc consumer_list(ConsumerListRequest) returns (stream Consumer) {}

    // Returns information about a specific distance type
    rpc distance_type_get(DistanceTypeGetRequest) returns (DistanceType) {}

    // Deletes one or more distance typees
    rpc distance_type_delete(DistanceTypeDeleteRequest) returns (
        DistanceTypeDeleteResponse) {}

    // Set information about a specific distance type
    rpc distance_type_set(DistanceTypeSetRequest) returns (
        DistanceTypeSetResponse) {}

    // Returns information about multiple distance types
    rpc distance_type_list(DistanceTypeListRequest) returns (
        stream DistanceType) {}

    // Returns information about a specific distance
    rpc distance_get(DistanceGetRequest) returns (Distance) {}

    // Deletes one or more distancees
    rpc distance_delete(DistanceDeleteRequest) returns (
        DistanceDeleteResponse) {}

    // Set information about a specific distance
    rpc distance_set(DistanceSetRequest) returns (DistanceSetResponse) {}

    // Returns information about multiple distances
    rpc distance_list(DistanceListRequest) returns (stream Distance) {}

    // Returns information about a specific provider type
    rpc provider_type_get(ProviderTypeGetRequest) returns (ProviderType) {}

    // Deletes one or more provider typees
    rpc provider_type_delete(ProviderTypeDeleteRequest) returns (
        ProviderTypeDeleteResponse) {}

    // Set information about a specific provider type
    rpc provider_type_set(ProviderTypeSetRequest) returns (
        ProviderTypeSetResponse) {}

    // Returns information about multiple provider types
    rpc provider_type_list(ProviderTypeListRequest) returns (
        stream ProviderType) {}

    // Returns information about a specific provider
    rpc provider_get(ProviderGetRequest) returns (Provider) {}

    // Deletes one or more providers
    rpc provider_delete(ProviderDeleteRequest) returns (
        ProviderDeleteResponse) {}

    // Set information about a specific provider
    rpc provider_set(ProviderSetRequest) returns (ProviderSetResponse) {}

    // Returns information about multiple providers
    rpc provider_list(ProviderListRequest) returns (stream Provider) {}

    // Add or remove capabilities from a provider
    rpc provider_capabilities_set(ProviderCapabilitiesSetRequest) returns (
        ProviderCapabilitiesSetResponse) {}

    // Returns capabilities for a provider
    rpc provider_capabilities_list(ProviderCapabilitiesListRequest) returns (
        stream Capability) {}

    // Add, remove and modify inventories for a provider
    rpc provider_inventories_set(ProviderInventoriesSetRequest) returns (
        ProviderInventoriesSetResponse) {}

    // Returns inventory information for a provider
    rpc provider_inventories_list(ProviderInventoriesListRequest) returns (
        stream Inventory) {}

    // Returns allocation information for a provider
    rpc provider_allocations_list(ProviderAllocationsListRequest) returns (
        stream Allocation) {}

    // Add or remove distances between a provider and provider groups
    rpc provider_distances_set(ProviderDistancesSetRequest) returns (
        ProviderDistancesSetResponse) {}

    // List provider distance records for a provider group
    rpc provider_group_distances_list(ProviderDistancesListRequest) returns (
        stream ProviderDistance) {}

    // Returns information about a specific provider group
    rpc provider_group_get(ProviderGroupGetRequest) returns (ProviderGroup) {}

    // Deletes one or more provider groups
    rpc provider_group_delete(ProviderGroupDeleteRequest) returns (
        ProviderGroupDeleteResponse) {}

    // Set information about a specific provider group
    rpc provider_group_set(ProviderGroupSetRequest) returns (
        ProviderGroupSetResponse) {}

    // Returns information about multiple provider groups
    rpc provider_group_list(ProviderGroupListRequest) returns (
        stream ProviderGroup) {}

    // Add or remove providers from a provider group
    rpc provider_group_members_set(ProviderGroupMembersSetRequest) returns (
        ProviderGroupMembersSetResponse) {}

    // List providers belonging to a provider group
    rpc provider_group_members_list(ProviderGroupMembersListRequest) returns (
        stream Provider) {}

    // List potential resource claims against providers that match a given set
    // of resource and capability constraints
    rpc claim_list(ClaimListRequest) returns (stream Claim) {}

    // Attempts to execute the supplied claim, resulting in the atomic
    // consumption of a set of resources on a set of one or more resource
    // providers
    rpc claim_execute(ClaimExecuteRequest) returns (ClaimExecuteResponse) {}

    // List usage records for a user or project and optional timeframe
    rpc usage_list(ClaimListRequest) returns (stream Usage) {}
}

// RPC Request payload messages
message ResourceClassGetRequest {
    Session session = 1;
    string search = 2;
}

message ResourceClassSetFields {
    StringValue code = 1;
    StringValue description = 2;
}

message ResourceClassSetRequest {
    Session session = 1;
    ResourceClass resource_class = 2;
    ResourceClassSetFields changed = 3;
}

message ResourceClassSetResponse {
    repeated Error errors = 1;
    ResourceClass resource_class = 2;
}

message ResourceClassListFilters {
    repeated string identifiers = 1;
}

message ResourceClassListRequest {
    Session session = 1;
    ResourceClassListFilters filters = 2;
    SearchOptions options = 3;
}

message ResourceClassDeleteRequest {
    Session session = 1;
    repeated ResourceClass resource_classes = 2;
}

message ResourceClassDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message CapabilityGetRequest {
    Session session = 1;
    string search = 2;
}

message CapabilitySetFields {
    StringValue code = 1;
    StringValue description = 2;
}

message CapabilitySetRequest {
    Session session = 1;
    Capability capability = 2;
    CapabilitySetFields changed = 3;
}

message CapabilitySetResponse {
    repeated Error errors = 1;
    Capability capability = 2;
}

message CapabilityListFilters {
    repeated string identifiers = 1;
}

message CapabilityListRequest {
    Session session = 1;
    CapabilityListFilters filters = 2;
    SearchOptions options = 3;
}

message CapabilityDeleteRequest {
    Session session = 1;
    repeated Capability capabilities = 2;
}

message CapabilityDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message ConsumerGetRequest {
    Session session = 1;
    string search = 2;
}

message ConsumerSetFields {
    StringValue name = 1;
    ConsumerType type = 50;
    Project project = 51;
    User user = 52;
}

message ConsumerSetRequest {
    Session session = 1;
    Consumer consumer = 2;
    ConsumerSetFields changed = 3;
}

message ConsumerSetResponse {
    repeated Error errors = 1;
    Consumer consumer = 2;
}

message ConsumerListFilters {
    repeated string identifiers = 1;
    repeated string type_identifiers = 2;
    repeated string project_identifiers = 3;
    repeated string user_identifiers = 4;
}

message ConsumerListRequest {
    Session session = 1;
    ConsumerListFilters filters = 2;
    SearchOptions options = 3;
}

message ConsumerDeleteRequest {
    Session session = 1;
    repeated Consumer consumers = 2;
}

message ConsumerDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message ConsumerTypeGetRequest {
    Session session = 1;
    string search = 2;
}

message ConsumerTypeSetFields {
    StringValue code = 1;
    StringValue description = 2;
}

message ConsumerTypeSetRequest {
    Session session = 1;
    ConsumerType consumer_type = 2;
    ConsumerTypeSetFields changed = 3;
}

message ConsumerTypeSetResponse {
    repeated Error errors = 1;
    ConsumerType consumer_type = 2;
}

message ConsumerTypeListFilters {
    repeated string identifiers = 1;
}

message ConsumerTypeListRequest {
    Session session = 1;
    ConsumerTypeListFilters filters = 2;
    SearchOptions options = 3;
}

message ConsumerTypeDeleteRequest {
    Session session = 1;
    repeated ConsumerType consumer_types = 2;
}

message ConsumerTypeDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message DistanceTypeGetRequest {
    Session session = 1;
    string search = 2;
}

message DistanceTypeSetFields {
    StringValue code = 1;
    StringValue description = 2;
}

message DistanceTypeSetRequest {
    Session session = 1;
    DistanceType distance_type = 2;
    DistanceTypeSetFields changed = 3;
}

message DistanceTypeSetResponse {
    repeated Error errors = 1;
    DistanceType distance_type = 2;
}

message DistanceTypeListFilters {
    repeated string identifiers = 1;
}

message DistanceTypeListRequest {
    Session session = 1;
    DistanceTypeListFilters filters = 2;
    SearchOptions options = 3;
}

message DistanceTypeDeleteRequest {
    Session session = 1;
    repeated DistanceType distance_types = 2;
}

message DistanceTypeDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message DistanceGetRequest {
    Session session = 1;
    string search = 2;
}

message DistanceSetFields {
    StringValue code = 1;
    StringValue description = 2;
    UInt32Value position = 3;
    DistanceType type = 50;
}

message DistanceSetRequest {
    Session session = 1;
    Distance distance = 2;
    DistanceSetFields changed = 3;
}

message DistanceSetResponse {
    repeated Error errors = 1;
    Distance distance = 2;
}

message DistanceListFilters {
    repeated string identifiers = 1;
    repeated string type_identifiers = 2;
}

message DistanceListRequest {
    Session session = 1;
    DistanceListFilters filters = 2;
    SearchOptions options = 3;
}

message DistanceDeleteRequest {
    Session session = 1;
    repeated Distance distances = 2;
}

message DistanceDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message ProviderTypeGetRequest {
    Session session = 1;
    string search = 2;
}

message ProviderTypeSetFields {
    StringValue code = 1;
    StringValue description = 2;
}

message ProviderTypeSetRequest {
    Session session = 1;
    ProviderType provider_type = 2;
    ProviderTypeSetFields changed = 3;
}

message ProviderTypeSetResponse {
    repeated Error errors = 1;
    ProviderType provider_type = 2;
}

message ProviderTypeListFilters {
    repeated string identifiers = 1;
}

message ProviderTypeListRequest {
    Session session = 1;
    ProviderTypeListFilters filters = 2;
    SearchOptions options = 3;
}

message ProviderTypeDeleteRequest {
    Session session = 1;
    repeated ProviderType provider_types = 2;
}

message ProviderTypeDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message ProviderGetRequest {
    Session session = 1;
    string search = 2;
}

message ProviderSetFields {
    Partition partition = 1;
    ProviderType type = 2;
    StringValue name = 3;
    Provider parent = 4;
}

message ProviderSetRequest {
    Session session = 1;
    Provider provider = 2;
    ProviderSetFields changed = 3;
}

message ProviderSetResponse {
    repeated Error errors = 1;
    Provider provider = 2;
}

message ProviderListFilters {
    // Return providers with any of the following UUID or slug identifiers
    repeated string identifiers = 1;

    // Return providers in any of the following partitions
    repeated Partition partitions = 2;

    // Constraints that may be used to query/filter the returned providers. See
    // the documentation in constraint.proto for more information on how these
    // work
    repeated ResourceConstraint resources = 50;
    repeated CapabilityConstraint capabilities = 51;
    repeated ProviderGroupConstraint provider_groups = 52;
    repeated MetadataConstraint provider_metadata = 53;
    repeated DistanceConstraint distances = 54;
}

message ProviderListRequest {
    Session session = 1;
    ProviderListFilters filters = 2;
    SearchOptions options = 3;
    // When grabbing provider information, fetch the provider's capabilities. This
    // option is always true if there are any CapabilityContraints in the filters
    bool fetch_capabilities = 50;
    // When grabbing provider information, fetch the provider's group
    // associations. This option is always true if there are any
    // ProviderGroupContraints in the filters
    bool fetch_provider_groups = 51;
    // When grabbing provider information, fetch the provider's metadata. This
    // option is always truye if there are any MetadataConstraints in the
    // filters
    bool fetch_metadata = 52;
    // When grabbing provider information, fetch the provider's inventory
    // records. This option is always truye if there are any
    // ResourceConstraints in the filters
    bool fetch_inventories = 53;
    // When grabbing provider information, fetch the provider's allocation
    // records.
    bool fetch_allocations = 54;
    // When grabbing provider information, fetch the provider's distance to
    // provider group records.
    bool fetch_distances = 55;
}

message ProviderDeleteRequest {
    Session session = 1;
    repeated Provider providers = 2;
}

message ProviderDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message ProviderCapabilitiesSetRequest {
    Session session = 1;
    Provider provider = 2;
    repeated string add = 3;
    repeated string remove = 4;
}

message ProviderCapabilitiesSetResponse {
    repeated Error errors = 1;
    Provider provider = 2;
    uint64 num_added = 3;
    uint64 num_removed = 4;
}

message ProviderCapabilitiesListFilters {
    // TODO(jaypipes): Maybe in the future there would be some sort of
    // prefixing to winnow capabilities by?
}

message ProviderCapabilitiesListRequest {
    Session session = 1;
    Provider provider = 2;
    ProviderCapabilitiesListFilters filters = 3;
    SearchOptions options = 4;
}

message ProviderInventoriesSetRequest {
    Session session = 1;
    Provider provider = 2;
    repeated Inventory add = 3;
    repeated Inventory remove = 4;
    repeated Inventory modify = 5;
}

message ProviderInventoriesSetResponse {
    repeated Error errors = 1;
    Provider provider = 2;
    uint64 num_added = 3;
    uint64 num_removed = 4;
    uint64 num_modified = 5;
}

message ProviderInventoriesListFilters {
    repeated string resource_class_identifiers = 1;
}

message ProviderInventoriesListRequest {
    Session session = 1;
    Provider provider = 2;
    ProviderInventoriesListFilters filters = 3;
    SearchOptions options = 4;
}

message ProviderAllocationsListFilters {
    repeated string resource_class_identifiers = 1;
    int64 claim_time = 2;
    int64 release_time = 3;
}

message ProviderAllocationsListRequest {
    Session session = 1;
    Provider provider = 2;
    ProviderAllocationsListFilters filters = 3;
    SearchOptions options = 4;
}

message ProviderDistancesSetRequest {
    Session session = 1;
    Provider provider = 2;
    repeated ProviderDistance add = 3;
    repeated ProviderDistance remove = 4;
    repeated ProviderDistance modify = 5;
}

message ProviderDistancesSetResponse {
    repeated Error errors = 1;
    Provider provider = 2;
    uint64 num_added = 3;
    uint64 num_removed = 4;
    uint64 num_modified = 5;
}

message ProviderDistancesListRequest {
    Session session = 1;
    Provider provider = 2;
}

message ProviderGroupGetRequest {
    Session session = 1;
    string search = 2;
}

message ProviderGroupSetFields {
    StringValue name = 1;
}

message ProviderGroupSetRequest {
    Session session = 1;
    ProviderGroup provider_group = 2;
    ProviderGroupSetFields changed = 3;
}

message ProviderGroupSetResponse {
    repeated Error errors = 1;
    ProviderGroup provider_group = 2;
}

message ProviderGroupListFilters {
    repeated string identifiers = 1;
}

message ProviderGroupListRequest {
    Session session = 1;
    ProviderGroupListFilters filters = 2;
    SearchOptions options = 3;
}

message ProviderGroupDeleteRequest {
    Session session = 1;
    repeated ProviderGroup provider_groups = 2;
}

message ProviderGroupDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message ProviderGroupMembersSetRequest {
    Session session = 1;
    ProviderGroup provider_group = 2;
    repeated string add = 3;
    repeated string remove = 4;
}

message ProviderGroupMembersSetResponse {
    repeated Error errors = 1;
    ProviderGroup provider_group = 2;
    uint64 num_added = 3;
    uint64 num_removed = 4;
}

message ProviderGroupMembersListRequest {
    Session session = 1;
    ProviderGroup provider_group = 2;
}

// A consumer requests some amount of resources and some matching constraints
// (required or forbidden capabilities, group relationships, metadata selectors,
// etc). This request is called a ClaimListRequest. A ClaimListRequest may be
// transactionally fulfilled by a ClaimExecute RPC API call. The service will
// respond to a ClaimListRequest with a stream of Claim messages that may be
// used (via ClaimExecute()) to attempt to reserve/claim resources on a set of
// providers for the consumer.
message ClaimListRequestGroupConstraints {
    repeated ResourceConstraint resources = 1;
    repeated CapabilityConstraint capabilities = 2;
    repeated ProviderGroupConstraint provider_groups = 3;
    repeated MetadataConstraint provider_metadata = 4;
    repeated DistanceConstraint distances = 5;
}

message ClaimListRequestGroupOptions {
    // Indicates that the constraints must be met by a single provider, not
    // multiple providers
    bool single_provider = 1;
    // Indicates that the providers satisfying this request group must NOT be
    // found in ANY of these request groups
    repeated ClaimListRequestGroup isolate_from = 2;
}

message ClaimListRequestGroup {
    // A simple optional tag/description for this group. e.g. "basic compute
    // resources" or "isolated intranet bandwidth resources"
    StringValue name = 1;
    ClaimListRequestGroupOptions options = 2;
    ClaimListRequestGroupConstraints constraints = 3;
}

message ClaimListRequest {
    Consumer consumer = 1;
    // The time that the intended allocation of resources will begin. Setting
    // to 0-value or anything less than the current time means "claim now".
    // Resources may be reserved by setting claim_start_time and
    // claim_release_time to a discrete temporal interval.
    int64 claim_start_time = 2;
    // The time that the intended allocation of resources will expire/release.
    // Setting to INT64_MAX means the resource claim is permanent.
    int64 claim_release_time = 3;
    repeated ClaimListRequestGroup request_groups = 50;
}

message ClaimExecuteRequest {
    Session session = 1;
    Claim claim = 2;
}

message ClaimExecuteResponse {
    repeated Error errors = 1;
    Claim claim = 2;
}

message UsageListFilters {
    repeated string user_identifiers = 1;
    repeated string project_identifiers = 2;
    int64 claim_time = 3;
    int64 release_time = 4;
}

message UsageListRequest {
    Session session = 1;
    UsageListFilters filters = 2;
    SearchOptions options = 3;
}
