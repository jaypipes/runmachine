syntax = "proto3";

package runm;

import "error.proto";
import "property.proto";
import "object.proto";
import "object_type.proto";
import "partition.proto";
import "search.proto";
import "session.proto";
import "wrappers.proto";

// The runm-metadata gRPC service is a lookup service for UUID to external
// unique names.
//
// In addition to the name and UUID lookups, runm-metadata serves as a
// specialized key/value store for various objects in the runm system. An
// administrator may create property schema items which dictate the required
// format or type of a property's values.
service RunmMetadata {
    // Creates minimal information for service to run, including a name for a
    // partition.
    rpc bootstrap(BootstrapRequest) returns (BootstrapResponse) {}

    // Returns information about a specific partition
    rpc partition_get(PartitionGetRequest) returns (Partition) {}

    // Returns information about multiple partitions
    rpc partition_list(PartitionListRequest) returns (
        stream Partition) {}

    // Returns information about a specific object type
    rpc object_type_get(ObjectTypeGetRequest) returns (ObjectType) {}

    // Returns information about multiple object types
    rpc object_type_list(ObjectTypeListRequest) returns (
        stream ObjectType) {}

    // Returns information about a specific property schema
    rpc property_schema_get(PropertySchemaGetRequest) returns (
        PropertySchema) {}

    // Deletes one or more property schemas
    rpc property_schema_delete(PropertySchemaDeleteRequest) returns (
        PropertySchemaDeleteResponse) {}

    // Set information about a specific property schema
    rpc property_schema_set(PropertySchemaSetRequest) returns (
        PropertySchemaSetResponse) {}

    // Returns information about multiple property schemas
    rpc property_schema_list(PropertySchemaListRequest) returns (
        stream PropertySchema) {}

    // Returns information about a specific object
    rpc object_get(ObjectGetRequest) returns (Object) {}

    // Deletes one or more objectes
    rpc object_delete(ObjectDeleteRequest) returns (
        ObjectDeleteResponse) {}

    // Set information about a specific object
    rpc object_set(ObjectSetRequest) returns (
        ObjectSetResponse) {}

    // Returns information about multiple objects
    rpc object_list(ObjectListRequest) returns (
        stream Object) {}

    // Add, remove or modify properties from an object
    rpc object_properties_set(ObjectPropertiesSetRequest) returns (
        ObjectPropertiesSetResponse) {}

    // Returns property items for an object
    rpc object_properties_list(ObjectPropertiesListRequest) returns (
        stream Property) {}
}

message BootstrapRequest {
    // The value of the one-time bootstrap token. This must match exactly the
    // value of the `--bootstrap-token` used when starting the metadata service
    // and this is destroyed at the successful execution of a bootstrap
    // operation.
    string bootstrap_token = 1;
    // A human-readable name for the partition you want to ensure exists
    string partition_name = 2;
    // Useful if you want to pre-determine partition UUIDs or during testing
    StringValue partition_uuid = 3;
}

message BootstrapResponse {
    // The partition that was created as part of the bootstrap process
    Partition partition = 1;
}

message PartitionGetRequest {
    Session session = 1;
    PartitionFilter filter = 2;
}

message PartitionListRequest {
    Session session = 1;
    SearchOptions options = 2;
    repeated PartitionFilter any = 3;
}

message ObjectTypeGetRequest {
    Session session = 1;
    ObjectTypeFilter filter = 2;
}

message ObjectTypeListRequest {
    Session session = 1;
    SearchOptions options = 2;
    // A set of filter expressions that are OR'd together when determining
    // matches
    repeated ObjectTypeFilter any = 3;
}

message ObjectGetRequest {
    Session session = 1;
    string search = 2;
}

message ObjectSetFields {
    Partition partition = 1;
    ObjectType object_type = 2;
    StringValue name = 3;
}

message ObjectSetRequest {
    Session session = 1;
    Object object = 2;
    ObjectSetFields changed = 3;
}

message ObjectSetResponse {
    repeated Error errors = 1;
    Object object = 2;
}

message ObjectListRequest {
    Session session = 1;
    SearchOptions options = 2;
    // A set of filter expressions that are OR'd together when determining
    // matches
    repeated ObjectFilter any = 3;
}

message ObjectDeleteRequest {
    Session session = 1;
    repeated Object object = 2;
}

message ObjectDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message PropertySchemaGetRequest {
    Session session = 1;
    string partition = 2;
    string object_type = 3;
    string key = 4;
}

message PropertySchemaSetRequest {
    Session session = 1;
    PropertySchema property_schema = 2;
}

message PropertySchemaSetResponse {
    PropertySchema property_schema = 2;
}

message PropertySchemaListFilter {
    string partition = 1;
    string object_type = 2;
    string key = 3;
}

message PropertySchemaListRequest {
    Session session = 1;
    SearchOptions options = 2;
    // A set of filter expressions that are OR'd together when determining
    // matches
    repeated PropertySchemaListFilter any = 3;
}

message PropertySchemaDeleteRequest {
    Session session = 1;
    repeated PropertySchema property_schema = 2;
}

message PropertySchemaDeleteResponse {
    repeated Error errors = 1;
    uint64 num_deleted = 2;
}

message ObjectPropertiesSetRequest {
    Session session = 1;
    Object object = 2;
    repeated Property add = 3;
    repeated Property remove = 4;
    repeated Property modify = 5;
}

message ObjectPropertiesSetResponse {
    repeated Error errors = 1;
    Object object = 2;
    uint64 num_added = 3;
    uint64 num_removed = 4;
    uint64 num_modified = 5;
}

message ObjectPropertiesListFilters {
    // Used when searching for items with one or more keys, regardless of value
    repeated string keys = 1;
    // Used when searching for items with one or more values, regardless of key
    repeated string values = 2;
    // Used when searching for specific key/value pairs
    repeated Property properties = 3;
}

message ObjectPropertiesListRequest {
    Session session = 1;
    Object object = 2;
    ObjectPropertiesListFilters filters = 3;
    SearchOptions options = 4;
}
